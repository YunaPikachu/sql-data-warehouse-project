/*
===================================================================================================
Stored Procedure: Load Silver Layer (Bronze -> Silver)
===================================================================================================
Script Purpose:
    THis stored procedure performs the ETL(Extract, Transform, Load) process to populate the 'silver'
    schema tables from the 'bronze' schema
===================================================================================================
*/


--TABLE silver.crm_cust_info 
--Cleaning the duplicates data or NULL
SELECT * FROM bronze.crm_cust_info
WHERE cst_id = 29449;

SELECT *, 
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM bronze.crm_cust_info
WHERE cst_id = 29449;


SELECT *, 
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM bronze.crm_cust_info


--gives a row number starting at 1 for each group of cst_id, ordered by cst_create_date (newest first).
-- Filters out the most recent row for each cst_id.
SELECT * FROM (
SELECT *, 
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM bronze.crm_cust_info
)t
WHERE flag_last != 1


--29466 only exist once the latest one
SELECT * FROM (
SELECT *, 
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM bronze.crm_cust_info
)t
WHERE flag_last = 1 AND cst_id = 29466


-- only the latest for all cst_id
SELECT * FROM (
SELECT *, 
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM bronze.crm_cust_info
)t
WHERE flag_last = 1 AND cst_id IS NOT NULL;


--check for unwanted spaces
--Expectation : No Results

--find who has space in their firstname and lastname
SELECT cst_firstname
FROM bronze.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname)

SELECT cst_lastname
FROM bronze.crm_cust_info
WHERE cst_lastname != TRIM(cst_lastname)

--remove spaces
SELECT 
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_lastname,
cst_marital_status,
cst_gndr,
cst_create_date
FROM (
SELECT *, 
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM bronze.crm_cust_info
)t
WHERE flag_last = 1 AND cst_id IS NOT NULL;

-- Data standardization & consistency
SELECT DISTINCT cst_gndr
FROM bronze.crm_cust_info;

SELECT 
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_lastname,
cst_marital_status,
CASE WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
	 WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
	 ELSE 'Unknown'
END cst_gndr,
cst_create_date
FROM (
SELECT *, 
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM bronze.crm_cust_info
)t
WHERE flag_last = 1 AND cst_id IS NOT NULL;


SELECT DISTINCT cst_marital_status
FROM bronze.crm_cust_info;


SELECT 
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_lastname,
CASE WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
	 WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
	 ELSE 'Unknown'
END cst_marital_status,
CASE WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
	 WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
	 ELSE 'Unknown'
END cst_gndr,
cst_create_date
FROM (
SELECT *, 
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM bronze.crm_cust_info
)t
WHERE flag_last = 1 AND cst_id IS NOT NULL;

--INSERT clean data into silver.crm_cust_info

INSERT INTO silver.crm_cust_info(
	cst_id,
	cst_key,
	cst_firstname,
	cst_lastname,
	cst_marital_status,
	cst_gndr,
	cst_create_date)

SELECT 
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_lastname,
CASE WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
	 WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
	 ELSE 'Unknown'
END cst_marital_status,
CASE WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
	 WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
	 ELSE 'Unknown'
END cst_gndr,
cst_create_date
FROM (
SELECT *, 
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM bronze.crm_cust_info
)t
WHERE flag_last = 1 AND cst_id IS NOT NULL;

--quality check of silver
--duplicates are removed
SELECT cst_id, COUNT(*)
FROM silver.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) >1 OR cst_id IS NULL

--spaces are removed 
SELECT cst_lastname
FROM silver.crm_cust_info
WHERE cst_lastname != TRIM(cst_lastname)

--rename gender from M, F into Male and Female
SELECT DISTINCT cst_gndr
FROM silver.crm_cust_info;

--check the whole table
SELECT *
FROM silver.crm_cust_info;

--TABLE silver.crm_prd_info
SELECT * FROM bronze.crm_prd_info

--Check For Nulls or Duplicates in Primary Key
--Expectatin: No Result

--1st column prd_id
SELECT 
prd_id,
COUNT(*)
FROM bronze.crm_prd_info
GROUP BY prd_id
HAVING COUNT(*) >1 OR prd_id IS NULL
--there was no duplicate and NULL in the column prd_id

--2nd column prd_key
SELECT
prd_id,
prd_key,
SUBSTRING(prd_key,1,5) AS cat_id, -- cat_id == id from erp_px_cat_g1v2, later can join them
prd_nm,
prd_cost,
prd_line,
prd_start_dt,
prd_end_dt
FROM bronze.crm_prd_info

--crm cat_id : CO-RF, erp id : CO_RF. have to mach them
SELECT
prd_id,
prd_key,
REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id, 
SUBSTRING(prd_key,7,LEN(prd_key)) AS prd_key, --extract second part from prd_key --created prd_key is for joining with another table
prd_nm,
prd_cost,
prd_line,
prd_start_dt,
prd_end_dt
FROM bronze.crm_prd_info


--the column prd_nm
SELECT prd_nm
FROM bronze.crm_prd_info
WHERE prd_nm != TRIM(prd_nm)
-- no result!! no record needed to be trimed

--the column prd_cost
--check for NULLs or Negative numbers for cost
--Expectation : No Results
SELECT prd_cost
FROM bronze.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL
--No negative cost, only NULLs exist

--change NULLs to 0
SELECT
prd_id,
prd_key,
REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id, 
SUBSTRING(prd_key,7,LEN(prd_key)) AS prd_key, 
prd_nm,
ISNULL(prd_cost,0) AS prd_cost,
prd_line,
prd_start_dt,
prd_end_dt
FROM bronze.crm_prd_info


--the column prd_line
--Data standardization &Consistency
SELECT DISTINCT prd_line
FROM bronze.crm_prd_info
--NULL exist (the result: NULL,M,R,S,T)

--give M,R,S,T new friendly values
SELECT
prd_id,
prd_key,
REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id, 
SUBSTRING(prd_key,7,LEN(prd_key)) AS prd_key, 
prd_nm,
ISNULL(prd_cost,0) AS prd_cost,
CASE WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
	 WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
	 WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
	 WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
	 ELSE 'Unknown'
END AS prd_line,
prd_start_dt,
prd_end_dt
FROM bronze.crm_prd_info


--the columns prd_start_dt, prd_edn_dt
--check for invalid date orders
SELECT *
FROM bronze.crm_prd_info
WHERE prd_end_dt < prd_start_dt --it's non sense the end date is earlier than the start date


SELECT
prd_id,
prd_key,
REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id, 
SUBSTRING(prd_key,7,LEN(prd_key)) AS prd_key, 
prd_nm,
ISNULL(prd_cost,0) AS prd_cost,
CASE WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
	 WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
	 WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
	 WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
	 ELSE 'Unknown'
END AS prd_line,
CAST(prd_start_dt AS DATE) AS prd_start_dt,
DATEADD(DAY, -1, LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)) AS prd_end_dt
FROM bronze.crm_prd_info




--change data type for silver.crm_prd_info

--insert the cleaned data into silver_crm_prd_info table
INSERT INTO silver.crm_prd_info(
	prd_id	,
	cat_id ,
	prd_key,
	prd_nm ,
	prd_cost,
	prd_line,
	prd_start_dt	,
	prd_end_dt
)
SELECT
prd_id,
REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id, 
SUBSTRING(prd_key,7,LEN(prd_key)) AS prd_key, 
prd_nm,
ISNULL(prd_cost,0) AS prd_cost,
CASE WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
	 WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
	 WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
	 WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
	 ELSE 'Unknown'
END AS prd_line,
CAST(prd_start_dt AS DATE) AS prd_start_dt,
DATEADD(DAY, -1, LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)) AS prd_end_dt
FROM bronze.crm_prd_info


--TABLE silver.crm_sales_details

SELECT
sls_ord_num,
sls_prd_key,
sls_cust_id,
sls_order_dt,
sls_ship_dt,
sls_due_dt,
sls_sales,
sls_quantity,
sls_price
FROM bronze.crm_sales_details

--checkt if the column sls_ord_num has unwanted space
SELECT
sls_ord_num,
sls_prd_key,
sls_cust_id,
sls_order_dt,
sls_ship_dt,
sls_due_dt,
sls_sales,
sls_quantity,
sls_price
FROM bronze.crm_sales_details
WHERE sls_ord_num != TRIM(sls_ord_num)
--nothing comes out, which means the column sls_ord_num is clean, which means I do not need to transfer this column

--sls_prd_key
--sls_prd_key is prd_key in the silver.crm_prd_info table
--check if there is any prd_key that is not in he silver.crm_prd_info table
SELECT
sls_ord_num,
sls_prd_key,
sls_cust_id,
sls_order_dt,
sls_ship_dt,
sls_due_dt,
sls_sales,
sls_quantity,
sls_price
FROM bronze.crm_sales_details
WHERE sls_prd_key NOT IN (SELECT prd_key FROM silver.crm_prd_info)
--nothing comes out, which means all the sls_prd_key from sales_details can be used with prd_key from crm_prd_info

--sls_cust_id
SELECT
sls_ord_num,
sls_prd_key,
sls_cust_id,
sls_order_dt,
sls_ship_dt,
sls_due_dt,
sls_sales,
sls_quantity,
sls_price
FROM bronze.crm_sales_details
WHERE sls_cust_id NOT IN (SELECT cst_id FROM silver.crm_cust_info)
--nothing comes out

--sls_order_dt, sls_ship_dt, sls_due_dt (change interger into date)
--check for invalid dates
SELECT
sls_order_dt
FROM bronze.crm_sales_details
WHERE sls_order_dt <= 0
--result : lots of 0s

--change 0 with NULL
SELECT
NULLIF(sls_order_dt,0) sls_order_dt
FROM bronze.crm_sales_details
WHERE sls_order_dt <= 0
--all the 0s are replaced with NULL

SELECT
NULLIF(sls_order_dt,0) sls_order_dt
FROM bronze.crm_sales_details
WHERE sls_order_dt <= 0
OR LEN(sls_order_dt) != 8 --e.g. 20250626
OR sls_order_dt > 20500101
OR sls_order_dt < 19000101
--result: NULL and 32154,5489 came out

SELECT
sls_ord_num,
sls_prd_key,
sls_cust_id,
CASE WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL
	 ELSE CAST(CAST(sls_order_dt AS VARCHAR)AS DATE) --change INT to VARCHAR to DATE
END AS sls_order_dt,
CASE WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN NULL
	 ELSE CAST(CAST(sls_ship_dt AS VARCHAR)AS DATE) --change INT to VARCHAR to DATE
END AS sls_ship_dt,
CASE WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL
	 ELSE CAST(CAST(sls_due_dt AS VARCHAR)AS DATE) --change INT to VARCHAR to DATE
END AS sls_due_dt,
sls_sales,
sls_quantity,
sls_price
FROM bronze.crm_sales_details
--20101229 -->2010-12-29

--check if sls_order_dt is smaller than sls_ship_dt and sls_due_dt(you need to have an order first to ship and have due)
SELECT *
FROM bronze.crm_sales_details
WHERE sls_order_dt > sls_ship_dt OR sls_order_dt > sls_ship_dt
result : 'none'

--sls_sales, sls_quantity, sls_price
--Sales = Quantity * Price
--Negative, Zeros, Nulls are Not Allowed!
SELECT DISTINCT
sls_sales,
sls_quantity,
sls_price
FROM bronze.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
OR sls_sales IS NULL OR sls_quantity IS NULL OR sls_price IS NULL
OR sls_sales <= 0 OR sls_quantity <= 0 OR sls_price <= 0
ORDER BY sls_sales, sls_quantity, sls_price
result : lots

--fix them
--If sales is negative, zero, or null,derive it using quantity and price
--If price is zero or null, calculate it suing sales and quantity
--If price is negative, convert it to a positive value
SELECT DISTINCT
sls_sales AS old_sls_sales,
sls_quantity AS old_sls_quantity,
sls_price AS old_sls_price,
CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)
		THEN sls_quantity * ABS(sls_price)
	ELSE sls_sales 
END AS sls_sales,
CASE WHEN sls_price IS NULL OR sls_price <= 0
		THEN sls_sales / NULLIF(sls_quantity,0)
	ELSE sls_price
END AS sls_price
FROM bronze.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
OR sls_sales IS NULL OR sls_quantity IS NULL OR sls_price IS NULL
OR sls_sales <= 0 OR sls_quantity <= 0 OR sls_price <= 0
ORDER BY sls_sales, sls_quantity, sls_price


--whole
SELECT
sls_ord_num,
sls_prd_key,
sls_cust_id,
CASE WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL
	 ELSE CAST(CAST(sls_order_dt AS VARCHAR)AS DATE) --change INT to VARCHAR to DATE
END AS sls_order_dt,
CASE WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN NULL
	 ELSE CAST(CAST(sls_ship_dt AS VARCHAR)AS DATE) --change INT to VARCHAR to DATE
END AS sls_ship_dt,
CASE WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL
	 ELSE CAST(CAST(sls_due_dt AS VARCHAR)AS DATE) --change INT to VARCHAR to DATE
END AS sls_due_dt,
CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)
		THEN sls_quantity * ABS(sls_price)
	ELSE sls_sales 
END AS sls_sales,
CASE WHEN sls_price IS NULL OR sls_price <= 0
		THEN sls_sales / NULLIF(sls_quantity,0)
	ELSE sls_price
END AS sls_price
FROM bronze.crm_sales_details

--Before insert the cleaned data into silver.crm_sales_details, check
--check for the DDL(creating table file)
--change INT to DATE for sls_order_dt, sls_ship_dt, sls_due_dt
IF OBJECT_ID ('silver.crm_sales_details', 'U') IS NOT NULL
	DROP TABLE silver.crm_sales_details;
CREATE TABLE silver.crm_sales_details(
	sls_ord_num	NVARCHAR(50),
	sls_prd_key	NVARCHAR(50),
	sls_cust_id	INT,
	sls_order_dt	DATE,
	sls_ship_dt	DATE,
	sls_due_dt	DATE,
	sls_sales	INT,
	sls_quantity INT,	
	sls_price INT,
	dwh_create_date DATETIME2 DEFAULT GETDATE()
);


--Insert into silver.crm_sales_details
INSERT INTO silver.crm_sales_details(
		sls_ord_num,
		sls_prd_key,
		sls_cust_id,
		sls_order_dt,
		sls_ship_dt,
		sls_due_dt,
		sls_sales,
		sls_quantity,
		sls_price
)
SELECT
sls_ord_num,
sls_prd_key,
sls_cust_id,
CASE WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL
	 ELSE CAST(CAST(sls_order_dt AS VARCHAR)AS DATE) --change INT to VARCHAR to DATE
END AS sls_order_dt,
CASE WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN NULL
	 ELSE CAST(CAST(sls_ship_dt AS VARCHAR)AS DATE) --change INT to VARCHAR to DATE
END AS sls_ship_dt,
CASE WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL
	 ELSE CAST(CAST(sls_due_dt AS VARCHAR)AS DATE) --change INT to VARCHAR to DATE
END AS sls_due_dt,
CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)
		THEN sls_quantity * ABS(sls_price)
	ELSE sls_sales 
END AS sls_sales,
sls_quantity,
CASE WHEN sls_price IS NULL OR sls_price <= 0
		THEN sls_sales / NULLIF(sls_quantity,0)
	ELSE sls_price
END AS sls_price
FROM bronze.crm_sales_details


--Quality check of the silver table
SELECT *
FROM silver.crm_sales_details
WHERE sls_order_dt > sls_ship_dt OR sls_order_dt > sls_ship_dt
--result: none

SELECT DISTINCT
sls_sales,
sls_quantity,
sls_price
FROM silver.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
OR sls_sales IS NULL OR sls_quantity IS NULL OR sls_price IS NULL
OR sls_sales <= 0 OR sls_quantity <= 0 OR sls_price <= 0
ORDER BY sls_sales, sls_quantity, sls_price
--result: none
--data is clean

SELECT * FROM silver.crm_sales_details


--TABLE silver.erp_cust_za12
SELECT
cid,
bdate,
gen
FROM bronze.erp_cust_az12

SELECT * FROM silver.crm_cust_info
--result: cid NASAW00011000(seperate it 1st) join cst_key AW00011000

--clean NAS......
SELECT
CASE WHEN cid LIKE 'NAS%' THEN	SUBSTRING(cid, 4, LEN(cid))
	ELSE cid
END AS cid,
bdate,
gen
FROM bronze.erp_cust_az12

--bdate
SELECT
CASE WHEN cid LIKE 'NAS%' THEN	SUBSTRING(cid, 4, LEN(cid))
	ELSE cid
END AS cid,
CASE WHEN bdate > GETDATE() THEN NULL
	ELSE bdate
END AS bdate,
gen
FROM bronze.erp_cust_az12

--gen
SELECT DISTINCT gen
FROM bronze.erp_cust_az12
--result: NULL, F, male, Female, M

-- clean them up
SELECT DISTINCT 
gen,
CASE WHEN UPPER(TRIM(gen)) IN ('F','FEMALE') THEN 'Female'
	 WHEN UPPER(TRIM(gen)) IN ('M','MALE') THEN 'Male'
	 ELSE 'Unknown'
END AS gen
FROM bronze.erp_cust_az12

--whole
SELECT
CASE WHEN cid LIKE 'NAS%' THEN	SUBSTRING(cid, 4, LEN(cid))
	ELSE cid
END AS cid,
CASE WHEN bdate > GETDATE() THEN NULL
	ELSE bdate
END AS bdate,
CASE WHEN UPPER(TRIM(gen)) IN ('F','FEMALE') THEN 'Female'
	 WHEN UPPER(TRIM(gen)) IN ('M','MALE') THEN 'Male'
	 ELSE 'Unknown'
END AS gen
FROM bronze.erp_cust_az12


--Insert
INSERT INTO silver.erp_cust_az12(cid,bdate,gen)
SELECT
CASE WHEN cid LIKE 'NAS%' THEN	SUBSTRING(cid, 4, LEN(cid))
	ELSE cid
END AS cid,
CASE WHEN bdate > GETDATE() THEN NULL
	ELSE bdate
END AS bdate,
CASE WHEN UPPER(TRIM(gen)) IN ('F','FEMALE') THEN 'Female'
	 WHEN UPPER(TRIM(gen)) IN ('M','MALE') THEN 'Male'
	 ELSE 'Unknown'
END AS gen
FROM bronze.erp_cust_az12



--TABLE silver.erp_loc_a101

SELECT
cid,
cntry
FROM bronze.erp_loc_a101;

SELECT cst_key FROM silver.crm_cust_info;

--cid
--join cid with cst_key from crm_cust_info
--cid AW-00011000 cst_key AW00011000
SELECT
REPLACE(cid,'-','') cid,
cntry
FROM bronze.erp_loc_a101;

--cntry
--check data standardization & consistency
SELECT DISTINCT cntry
FROM bronze.erp_loc_a101
ORDER BY cntry
--Result: NULL, Australia,    ,Canada,DE,France,Germany,United Kingdom,United States,US,USA

--Fix
SELECT
REPLACE(cid,'-','') cid,
CASE WHEN TRIM(cntry) = 'DE' THEN 'Germany'
	 WHEN TRIM (cntry) IN('USA','US') THEN 'United States'
	 WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'Unknown'
END AS cntry
FROM bronze.erp_loc_a101;

--insert
INSERT INTO silver.erp_loc_a101(cid,cntry)
SELECT
REPLACE(cid,'-','') cid,
CASE WHEN TRIM(cntry) = 'DE' THEN 'Germany'
	 WHEN TRIM (cntry) IN('USA','US') THEN 'United States'
	 WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'Unknown'
END AS cntry
FROM bronze.erp_loc_a101;




--TABLE silver.erp_px_cat_g1v2
SELECT * FROM bronze.erp_px_cat_g1v2

SELECT
ID,
CAT,
SUBCAT,
MAINTENANCE
FROM bronze.erp_px_cat_g1v2

--check for unwanted spaces
SELECT * FROM bronze.erp_px_cat_g1v2
WHERE cat != TRIM(cat) OR subcat != TRIM(subcat) OR maintenance != TRIM(maintenance)
--result: none. it's clean

--check standardization & consistency
SELECT DISTINCT
cat
FROM bronze.erp_px_cat_g1v2

SELECT DISTINCT
subcat
FROM bronze.erp_px_cat_g1v2

SELECT DISTINCT
maintenance
FROM bronze.erp_px_cat_g1v2

--insert
INSERT INTO silver.erp_px_cat_g1v2
(id,cat,subcat,maintenance)
SELECT
ID,
CAT,
SUBCAT,
MAINTENANCE
FROM bronze.erp_px_cat_g1v2

